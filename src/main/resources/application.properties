spring.application.name=social-login-to-openid-connect

spring.security.oauth2.client.registration.custom-client.client-id=${OAUTH_SOCIAL_LOGIN_CLIENT_ID}
spring.security.oauth2.client.registration.custom-client.client-secret=${OAUTH_SOCIAL_LOGIN_SECRET}
spring.security.oauth2.client.registration.custom-client.client-name=CustomProvider
spring.security.oauth2.client.registration.custom-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.custom-client.redirect-uri=${OAUTH_SOCIAL_LOGIN_REDIRECTURI}

spring.security.oauth2.client.provider.custom-provider.authorization-uri=${OAUTH_SOCIAL_LOGIN_AUTHORIZATION_URI}
spring.security.oauth2.client.provider.custom-provider.token-uri=${OAUTH_SOCIAL_LOGIN_TOKEN_URI}
spring.security.oauth2.client.provider.custom-provider.user-info-uri=${OAUTH_SOCIAL_LOGIN_USER_INFO_URI}
spring.security.oauth2.client.provider.custom-provider.user-name-attribute=email

spring.security.oauth2.client.registration.custom-client.provider=custom-provider

spring.security.oauth2.authorizationserver.issuer: ${OPENID_ISSUER}

spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=${OPENID_CLIENT_ID}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}${OPENID_CLIENT_SECRET}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods=client_secret_basic
spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types=authorization_code, refresh_token
spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris=${OPENID_REDIRECT_URI}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes=openid, profile, email
spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=false